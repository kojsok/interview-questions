Прототипное наследование — это концепция в JavaScript, где объекты могут наследовать свойства и методы от других объектов. В JavaScript нет классов как в классических объектно-ориентированных языках, таких как Java или C++. Вместо этого объекты могут напрямую наследовать свойства и методы от других объектов через цепочку прототипов.

Как работает прототипное наследование?
Каждый объект в JavaScript имеет скрытую ссылку на другой объект, называемый его "прототипом" (доступен через свойство __proto__ или через Object.getPrototypeOf(obj)). Этот прототип может иметь свои собственные свойства и методы, которые могут быть унаследованы дочерним объектом. Если вы пытаетесь получить доступ к свойству объекта и оно не найдено, JavaScript будет искать это свойство в прототипе объекта. Если свойство не найдено в прототипе, поиск продолжается по цепочке прототипов до тех пор, пока не будет найдено свойство или не будет достигнут конец цепочки (обычно Object.prototype).

Пример прототипного наследования
javascript
Копировать код
const animal = {
    eats: true,
    walk() {
        console.log("Animal walk");
    }
};

const rabbit = {
    jumps: true
};

// Установим animal как прототип для rabbit
rabbit.__proto__ = animal;

console.log(rabbit.eats); // true (унаследовано от animal)
rabbit.walk(); // Animal walk (унаследовано от animal)
Как создать объект без прототипа?
В JavaScript можно создать объект, который не имеет прототипа (то есть, объект без наследования от Object.prototype). Это можно сделать с помощью метода Object.create(null).

Пример:

javascript
Копировать код
const obj = Object.create(null);

console.log(obj); // {}
console.log(obj.__proto__); // undefined
console.log(obj.toString); // undefined
Такой объект будет абсолютно "чистым", без унаследованных свойств и методов. Это может быть полезно, например, когда вы хотите создать объект для использования в качестве карты (ассоциативного массива), и не хотите, чтобы в нем были стандартные методы, такие как toString, hasOwnProperty и т.д.
